//利用命名管道实现文件拷贝
1.Makefile
//项目是需要清理的

.PHONY:all  
all:mudiwenjian yuanwenjian

mudiwenjian:mudiwenjian.c
	gcc -o $@ $^
yuanwenjian:yuanwenjian.c
	gcc -o $@ $^
.PHONY:clean  //设置为伪目标，使用.PHONY修饰，特性是总是被执行，无论当前目录下是否有目标
clean:
	rm -f mudiwenjian yuanwenjian
  
2.yuanwenjian.c
  
#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>

#define ERR_EXIT(m)\
    do\
    {\
	perror(m);\
	exit(EXIT_FAILURE);\
    }while(0)

int main(int argc,char *argv[])
{
    mkfifo("tp",0644);  //创建命名管道
    int infd;
    infd=open("abc",O_RDONLY);  //打开一个已有的abc文件
    if(infd==-1)ERR_EXIT("open");
    int outfd;
    outfd=open("tp",O_WRONLY);  //打开管道准备写入
    if(outfd==-1)ERR_EXIT("open");
    char buf[1024];
    int n;
    while((n=read(infd,buf,1024))>0)  //先将abc文件的内容读到数组buf中
    {
	    write(outfd,buf,n);  //然后在写入管道中
    }
    close(infd);
    close(outfd);
    return 0;
}

3.mudiwenjian.c

#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>

#define ERR_EXIT(m)\
    do\
{\
    perror(m);\
    exit(EXIT_FAILURE);\
}while(0);

int main(int argc,char *argv[])
{
    int outfd;
    outfd=open("abc.txt",O_WRONLY|O_CREAT|O_TRUNC,0644);  //创建目标文件
    if(outfd==-1)ERR_EXIT("open");

    int infd;
    infd=open("tp",O_RDONLY);
    if(infd==-1)ERR_EXIT("open");

    char buf[1024];
    int n;
    while((n=read(infd,buf,1024))>0)  //将管道的数据读入到数组buf中
    {
    
	    write(outfd,buf,n);  //将数组中的内容写入到outfd中，写入的数据必须是确定的字节数
    }
    close(infd);
    close(outfd);
    unlink("tp");
    return 0;
}

4.abc

I LOVE YOU!3


