//使用信号量

1.Makefile

test_sem:comm.c test_sem.c
	gcc -o $@ $^
.PHONY:clean
clean:
	rm -f test_sem
  
2.comm.h

#ifndef _COMM_H_
#define _COMM_H_

#include <stdio.h>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/sem.h>

union  semun{
	int val;
	struct semid_ds *buf;
	unsigned short *array;
	struct seminfo *_buf;
};

int createSemSet(int nums);
int initSem(int semid,int nums,int initval);
int getSemSet(int nums);
int P(int semid,int flags);
int V(int senid,int flags);
int destroySemSet(int semid);

#endif

3.comm.c

#include "comm.h"

static int commSemSet(int nums,int flags)
{
	key_t key=ftok(".",0X6666);
	if(key<0){
		perror("ftok");
		return -1;
	}
	int semid=semget(key,nums,flags);
	if(semid<0){
		perror("semget");
		return -2;
	}
	return semid;
}

int createSemSet(int nums)
{
	return commSemSet(nums,IPC_CREAT|IPC_EXCL|0666);
}
int getSemSet(int nums)
{
	return commSemSet(nums,IPC_CREAT);
}

int initSem(int semid,int nums,int initVal)
{
	union semun un;
	un.val=initVal;
	if(semctl(semid,nums,SETVAL,un)<0){
		perror("semctl");
		return -1;
	}
	return 0;
}

static int commPV(int semid,int flags,int op)
{
	struct sembuf sf;
	sf.sem_num=flags;
	sf.sem_op=op;
	sf.sem_flg=0;
	if(semop(semid,&sf,1)<0){
		perror("semop");
		return -1;
	}
	return 0;
}

int P(int semid,int flags)
{
	return commPV(semid,flags,-1);
}

int V(int semid,int flags)
{
	return commPV(semid,flags,1);
}

int destroySemSet(int semid)
{
	if(semctl(semid,0,IPC_RMID)<0){
		perror("semctl");
		return -1;
	}
}

4.test_sem.c

#include "comm.h"

int main()
{
	int semid=createSemSet(1);
	initSem(semid,0,1);
	pid_t id=fork();
	if(id==0){//child
		int _semid=getSemSet(0);
		while(1){
			P(_semid,0);
			printf("A");
			fflush(stdout);
			usleep(100000);
			printf("A ");
			fflush(stdout);
			usleep(100000);
			V(_semid,0);
		}
	}else{//father
		while(1){
			P(semid,0);
			printf("B");
			fflush(stdout);
			usleep(100000);
			printf("B ");
			fflush(stdout);
			usleep(100000);
			V(semid,0);
		}
		wait(NULL);
	}
	destroySemSet(semid);
	return 0;
}
